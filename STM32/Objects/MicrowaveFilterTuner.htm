<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MicrowaveFilterTuner.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MicrowaveFilterTuner.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Mar 28 13:24:54 2020
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; command &rArr; checkCommand &rArr; commandG16 &rArr; moveP &rArr; moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[33]">CEC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[31]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[20]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2b]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2a]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[32]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[38]">Reset_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md_vl.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[21]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[23]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[22]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[27]">TIM4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[34]">TIM6_DAC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[35]">TIM7_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2f]">USART2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[30]">USART3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[39]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md_vl.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[97]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[99]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[47]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[43]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; command &rArr; checkCommand &rArr; commandG16 &rArr; moveP &rArr; moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[46]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[48]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[38]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[87]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringToLCD
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNum
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[45]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bf]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo24
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>checkCommand</STRONG> (Thumb, 528 bytes, Stack size 8 bytes, communications.o(i.checkCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = checkCommand &rArr; commandG16 &rArr; moveP &rArr; moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandM42
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandM18
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandM17
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG30
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG28
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG16
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG15
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG0
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandA
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonRecoverableError
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command
</UL>

<P><STRONG><a name="[5e]"></a>clearBuffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, communications.o(i.clearBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command
</UL>

<P><STRONG><a name="[76]"></a>clockInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, communications.o(i.clockInit))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>command</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, communications.o(i.command))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = command &rArr; checkCommand &rArr; commandG16 &rArr; moveP &rArr; moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbyte
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearBuffer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>commandA</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, communications.o(i.commandA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commandA &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[4f]"></a>commandG0</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, communications.o(i.commandG0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = commandG0 &rArr; moveZ &rArr; moveMotor &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNum
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZ
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveY
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveX
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[51]"></a>commandG1</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, communications.o(i.commandG1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = commandG1 &rArr; moveZSlow &rArr; moveMotorSlow &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNum
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZSlow
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveYSlow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveXSlow
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[54]"></a>commandG15</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, communications.o(i.commandG15))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = commandG15 &rArr; phiHome &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[55]"></a>commandG16</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, communications.o(i.commandG16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = commandG16 &rArr; moveP &rArr; moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveP
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveN
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[52]"></a>commandG28</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, communications.o(i.commandG28))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = commandG28 &rArr; homeMotors &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeMotors
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[53]"></a>commandG30</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, communications.o(i.commandG30))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = commandG30 &rArr; moveZScrew &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZScrew
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[57]"></a>commandM17</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, communications.o(i.commandM17))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = commandM17
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableMotors
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[58]"></a>commandM18</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, communications.o(i.commandM18))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = commandM18
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableMotors
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[56]"></a>commandM42</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, communications.o(i.commandM42))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = commandM42 &rArr; lightsToggle &rArr; printHex
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
</UL>

<P><STRONG><a name="[6f]"></a>commandToLCD</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, visualdisplaysubsystem.o(i.commandToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = commandToLCD
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayError
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdsInit
</UL>

<P><STRONG><a name="[71]"></a>dataToLCD</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, visualdisplaysubsystem.o(i.dataToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dataToLCD
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringToLCD
</UL>

<P><STRONG><a name="[70]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, visualdisplaysubsystem.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataToLCD
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandToLCD
</UL>

<P><STRONG><a name="[73]"></a>delayUs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, motorcontrolsubsystem.o(i.delayUs))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZScrew
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorSlow
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotor
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeMotors
</UL>

<P><STRONG><a name="[6d]"></a>disableMotors</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, motorcontrolsubsystem.o(i.disableMotors))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandM18
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorInit
</UL>

<P><STRONG><a name="[6c]"></a>enableMotors</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, motorcontrolsubsystem.o(i.enableMotors))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandM17
</UL>

<P><STRONG><a name="[60]"></a>getNum</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, communications.o(i.getNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = getNum &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG30
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG16
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG0
</UL>

<P><STRONG><a name="[5f]"></a>getbyte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, communications.o(i.getbyte))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command
</UL>

<P><STRONG><a name="[6a]"></a>homeMotors</STRONG> (Thumb, 1164 bytes, Stack size 40 bytes, motorcontrolsubsystem.o(i.homeMotors))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = homeMotors &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG28
</UL>

<P><STRONG><a name="[50]"></a>lcdDisplayError</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, visualdisplaysubsystem.o(i.lcdDisplayError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringToLCD
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZScrew
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorSlow
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotor
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeMotors
</UL>

<P><STRONG><a name="[5b]"></a>lcdDisplayStatus</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, visualdisplaysubsystem.o(i.lcdDisplayStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringToLCD
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandA
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZSlow
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveYSlow
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveY
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveXSlow
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveX
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeMotors
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdsInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_open
</UL>

<P><STRONG><a name="[79]"></a>lightsInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, visualidentificationsubsystem.o(i.lightsInit))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>lightsToggle</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, visualidentificationsubsystem.o(i.lightsToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lightsToggle &rArr; printHex
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandM42
</UL>

<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main &rArr; command &rArr; checkCommand &rArr; commandG16 &rArr; moveP &rArr; moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdsInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_open
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[78]"></a>motorInit</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, motorcontrolsubsystem.o(i.motorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motorInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableMotors
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>moveMotor</STRONG> (Thumb, 1672 bytes, Stack size 32 bytes, motorcontrolsubsystem.o(i.moveMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = moveMotor &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonRecoverableError
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZ
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveY
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveX
</UL>

<P><STRONG><a name="[7c]"></a>moveMotorDeg</STRONG> (Thumb, 606 bytes, Stack size 40 bytes, motorcontrolsubsystem.o(i.moveMotorDeg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveP
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveN
</UL>

<P><STRONG><a name="[86]"></a>moveMotorSlow</STRONG> (Thumb, 1660 bytes, Stack size 32 bytes, motorcontrolsubsystem.o(i.moveMotorSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = moveMotorSlow &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonRecoverableError
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZSlow
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveYSlow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveXSlow
</UL>

<P><STRONG><a name="[69]"></a>moveN</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, motorcontrolsubsystem.o(i.moveN))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = moveN &rArr; moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG16
</UL>

<P><STRONG><a name="[68]"></a>moveP</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, motorcontrolsubsystem.o(i.moveP))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = moveP &rArr; moveMotorDeg &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG16
</UL>

<P><STRONG><a name="[61]"></a>moveX</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, motorcontrolsubsystem.o(i.moveX))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = moveX &rArr; moveMotor &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG0
</UL>

<P><STRONG><a name="[64]"></a>moveXSlow</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motorcontrolsubsystem.o(i.moveXSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = moveXSlow &rArr; moveMotorSlow &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorSlow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG1
</UL>

<P><STRONG><a name="[62]"></a>moveY</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, motorcontrolsubsystem.o(i.moveY))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = moveY &rArr; moveMotor &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG0
</UL>

<P><STRONG><a name="[65]"></a>moveYSlow</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motorcontrolsubsystem.o(i.moveYSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = moveYSlow &rArr; moveMotorSlow &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorSlow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG1
</UL>

<P><STRONG><a name="[63]"></a>moveZ</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, motorcontrolsubsystem.o(i.moveZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = moveZ &rArr; moveMotor &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG0
</UL>

<P><STRONG><a name="[6b]"></a>moveZScrew</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, motorcontrolsubsystem.o(i.moveZScrew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = moveZScrew &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG30
</UL>

<P><STRONG><a name="[66]"></a>moveZSlow</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motorcontrolsubsystem.o(i.moveZSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = moveZSlow &rArr; moveMotorSlow &rArr; lcdDisplayError &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorSlow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG1
</UL>

<P><STRONG><a name="[5a]"></a>nonRecoverableError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motorcontrolsubsystem.o(i.nonRecoverableError))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorSlow
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotor
</UL>

<P><STRONG><a name="[67]"></a>phiHome</STRONG> (Thumb, 882 bytes, Stack size 48 bytes, motorcontrolsubsystem.o(i.phiHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = phiHome &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG15
</UL>

<P><STRONG><a name="[75]"></a>printHex</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, communications.o(i.printHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = printHex
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZSlow
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveYSlow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveXSlow
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveP
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveN
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorSlow
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotor
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsToggle
</UL>

<P><STRONG><a name="[5c]"></a>sendbyte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, communications.o(i.sendbyte))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG28
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandG16
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZSlow
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveYSlow
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveY
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveXSlow
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveX
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveP
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveN
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorSlow
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotor
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsToggle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command
</UL>

<P><STRONG><a name="[77]"></a>serial_open</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, communications.o(i.serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_open &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>stringToLCD</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, visualdisplaysubsystem.o(i.stringToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayError
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdsInit
</UL>

<P><STRONG><a name="[7a]"></a>vdsInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, visualdisplaysubsystem.o(i.vdsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vdsInit &rArr; lcdDisplayStatus &rArr; stringToLCD &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringToLCD
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdDisplayStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[88]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[8f]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[8c]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[8d]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveP
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveN
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[c4]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[8e]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[92]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[90]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[8b]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[8a]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[91]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[93]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phiHome
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveMotorDeg
</UL>

<P><STRONG><a name="[95]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4c]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo24
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo24
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4d]"></a>SetSysClockTo24</STRONG> (Thumb, 178 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo24))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo24
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[94]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[89]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
